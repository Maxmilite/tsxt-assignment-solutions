#version 450

layout(local_size_x = 16, local_size_y = 16) in;

struct Sphere {
    vec3 center;
    float padding1;
    vec3 color;
    float padding2;
    float radius;
    float padding3[3];
};

struct Wall {
    vec3 p00;
    float padding1;
    vec3 p01;
    float padding2;
    vec3 p10;
    float padding3;
    vec3 p11;
    float padding4;
    vec3 color;
    float padding5;
};

layout(std430, binding = 1) buffer SpheresBuffer {
    Sphere spheres[];
};

layout(std430, binding = 2) buffer WallsBuffer {
    Wall walls[];
};

uniform int numSpheres;
uniform int numWalls;
uniform vec3 cameraPos;
uniform vec3 cameraFront;
uniform vec3 cameraRight;
uniform vec3 cameraUp;
uniform float cameraFov;
uniform int width, height;

uniform vec3 lightPos;
uniform vec3 lightRadiance;
uniform float lightRadius;
uniform int maxBounces;

uniform int rerender;
uniform uint frame;
uniform int spp;

uint seed;
vec2 screenUV;

layout(binding = 0, rgba32f) uniform image2D outputImage;

uint hash(uint x) {
    x ^= x << 13;
    x ^= x >> 17;
    x *= seed;
    x *= 0x85ebca6b;
    x ^= x >> 16;
    x *= 0x85ebca6b;
    x ^= x >> 13;
    x *= 0xc2b2ae35;
    x ^= x >> 16;
    seed = x;
    return x;
}

float random(vec2 uv) {
    uv = (uv + 1.0) / 2.0; // Map UV to [0, 1]
    uint state = hash(uint(uv.x * 4294967296.0)) ^ hash(uint(uv.y * 4294967296.0));
    return float(state) / 4294967296.0;
}

bool intersectTriangle(vec3 ro, vec3 rd, bool culling, vec3 v0, vec3 v1, vec3 v2, out float t, out vec3 normal) {
    vec3 edge1 = v1 - v0;
    vec3 edge2 = v2 - v0;
    normal = normalize(cross(edge1, edge2));
    if (culling && dot(normal, rd) > 0.0) return false;

    vec3 h = cross(rd, edge2);
    float a = dot(edge1, h);
    if (abs(a) < 1e-6) return false;

    float f = 1.0 / a;
    vec3 s = ro - v0;
    float u = f * dot(s, h);
    if (u < 0.0 || u > 1.0) return false;

    vec3 q = cross(s, edge1);
    float v = f * dot(rd, q);
    if (v < 0.0 || u + v > 1.0) return false;

    t = f * dot(edge2, q);
    return t > 1e-6;
}

bool intersect(vec3 ro, vec3 rd, bool culling, out float t, out vec3 hitNormal, out vec3 hitColor) {
    bool hit = false;
    t = 1e8;

    for (int i = 0; i < numSpheres; i++) {
        vec3 oc = ro - spheres[i].center;
        float b = dot(oc, rd);
        float c = dot(oc, oc) - spheres[i].radius * spheres[i].radius;
        float h = b * b - c;
        if (h < 0.0) continue;

        h = sqrt(h);
        float tempT = -b - h;
        if (tempT < 0.0) tempT = -b + h;
        if (tempT < 0.0 || tempT >= t) continue;

        t = tempT;
        hitNormal = normalize(ro + rd * t - spheres[i].center);
        hitColor = spheres[i].color;
        hit = true;
    }

    float tempT;
    vec3 normalTemp;
    for (int i = 0; i < numWalls; i++) {
        Wall wall = walls[i];
        if (intersectTriangle(ro, rd, culling, wall.p00, wall.p01, wall.p10, tempT, normalTemp) && tempT < t) {
            t = tempT;
            hitNormal = normalTemp;
            hitColor = wall.color;
            hit = true;
        }
        if (intersectTriangle(ro, rd, culling, wall.p11, wall.p10, wall.p01, tempT, normalTemp) && tempT < t) {
            t = tempT;
            hitNormal = normalTemp;
            hitColor = wall.color;
            hit = true;
        }
    }

    return hit;
}

vec3 randomHemisphere(vec3 normal, vec2 uv) {
    
    // add some noise to the normal
    normal += 5e-4 * (vec3(random(uv), random(uv), random(uv)) - 0.5);
    normal = normalize(normal);

    float phi = 2.0 * 3.14159265359 * random(uv);
    float cosTheta = 1.0 - random(uv);
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    vec3 tangent = normalize(cross(normal, vec3(0.0, 1.0, 0.0)));
    vec3 bitangent = cross(normal, tangent);

    return normalize(tangent * cos(phi) * sinTheta + bitangent * sin(phi) * sinTheta + normal * cosTheta);
}

vec3 randomSphere(vec2 uv) {
    float phi = 2.0 * 3.14159265359 * random(uv);
    float cosTheta = 2.0 * random(uv) - 1.0;
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    return vec3(cos(phi) * sinTheta, cosTheta, sin(phi) * sinTheta);
}

vec3 sampleLight(vec3 hitPos, vec3 normal, vec3 lightPos, float lightRadius, out float pdf) {

    vec3 toLightCenter = normalize(lightPos - hitPos);
    vec3 randDir = normalize(randomHemisphere(toLightCenter, screenUV)); 
    vec3 lightPoint = lightPos + lightRadius * randDir;

    vec3 lightDir = lightPoint - hitPos;
    float distSq = dot(lightDir, lightDir);
    lightDir = normalize(lightDir);

    float cosTheta = max(0.0, dot(lightDir, toLightCenter));
    pdf = (cosTheta > 1e-4) ? distSq / (cosTheta * 4.0 * 3.14159265359 * lightRadius * lightRadius) : 0.0;

    return lightPoint;
}

vec3 tracePath(vec3 ro, vec3 rd) {
    vec3 radiance = vec3(0.0);
    vec3 throughput = vec3(1.0);
    vec3 hitNormal, hitColor;

    for (int bounce = 0; bounce < maxBounces; bounce++) {
        float t;

        bool hit = intersect(ro, rd, true, t, hitNormal, hitColor);
        if (!hit) {
            break;
        }

        vec3 hitPos = ro + rd * t;
        float lightPdf;
        vec3 lightSample = sampleLight(hitPos, hitNormal, lightPos, lightRadius, lightPdf);
        vec3 lightDir = normalize(lightSample - hitPos);
        float dist = length(lightSample - hitPos);

        vec3 shadowOrigin = hitPos + lightDir * 1e-3;
        float shadowT;
        vec3 shadowNormal, shadowColor;
        bool shadowHit = intersect(shadowOrigin, lightDir, false, shadowT, shadowNormal, shadowColor);

        if (!shadowHit || shadowT >= dist - 1e-3) {
            vec3 Li = lightRadiance / (dist * dist + 1e-6);
            float cosTheta = max(0.0, dot(hitNormal, lightDir));
            vec3 lightContrib = (Li * cosTheta * hitColor / (lightPdf));

            radiance += throughput * lightContrib;
        }

        vec3 newDir = vec3(0.0);
        float pdf = 0.0;

        if (random(screenUV) < -1) { // disable reflection
            // reflection
            newDir = reflect(rd, hitNormal);
            pdf = 1.0;
            throughput *= hitColor * dot(hitNormal, newDir) / pdf;
        } else {
            // diffuse
            newDir = randomHemisphere(hitNormal, screenUV);
            pdf = 1 / (2 * 3.14159265359);
            if (pdf <= 0.0) break;

            vec3 f_r = hitColor / 3.14159265359;

            throughput *= f_r * dot(newDir, hitNormal) / pdf;
        }


        float rrProb = 0.8;
        if (random(screenUV) > rrProb) break;
        throughput /= rrProb;

        ro = hitPos + newDir * 1e-3;
        rd = newDir;
    }

    return radiance;
}

void main() {
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    if (pixelCoords.x >= width || pixelCoords.y >= height) return;

    vec2 uv = (vec2(pixelCoords) / vec2(width, height)) * 2.0 - 1.0;
    uv.x *= float(width) / float(height);
    screenUV = vec2(pixelCoords) / vec2(width, height);

    seed = frame;
    seed *= 0x85ebca6b;
    seed ^= seed >> 16;
    seed *= 0x85ebca6b;
    seed ^= seed >> 13;
    seed *= 0xc2b2ae35;
    seed ^= seed >> 16;

    vec3 rayDir = normalize(cameraFront + uv.x * cameraRight * tan(cameraFov * 0.5) + uv.y * cameraUp * tan(cameraFov * 0.5));

    vec3 color = vec3(0.0);

    for (int i = 0; i < spp; ++i) {
        vec2 jitter = vec2(random(screenUV), random(screenUV));
        vec2 newUV = (vec2(pixelCoords) + jitter) / vec2(width, height) * 2.0 - 1.0;
        newUV.x *= float(width) / float(height);
        vec3 newRayDir = normalize(cameraFront + newUV.x * cameraRight * tan(cameraFov * 0.5) + newUV.y * cameraUp * tan(cameraFov * 0.5));
        color += tracePath(cameraPos, newRayDir);
    }

    color /= float(spp);

    vec4 lastRadiance = imageLoad(outputImage, pixelCoords);
    if (rerender != 0) lastRadiance = vec4(0.0);
    
    color = (lastRadiance.xyz * float(frame - 1) + color) / float(frame);

    imageStore(outputImage, pixelCoords, vec4(color, 1.0));
}
